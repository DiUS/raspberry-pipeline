# deals with messages that are generated by:
# https://github.com/jkelabora/snsnotify-plugin

import os


def randomly_choose_mp3(directory):
    from random import randrange
    import glob
    files = glob.glob("{0}*.mp3".format(directory))
    return files[randrange(len(files))]

# import os
import logging
log = logging.getLogger()

def play_this_thing(filename):
    log.info("playing {0}...".format(filename))
    os.system("mpg321 {0} &".format(filename))


import re
from lib.base_message_interface import BaseMessageInterface

# these keys need to be case-sensitive matches of the jenkins build names
jenkins_segments = {
    'Prepare' : 0,
    'Unit Tests' : 1,
    'Integration Tests' : 2,
    'Deploy Test' : 3,
    'Deploy to QA' : 4
}

# the keys here are from the snsnotify-plugin, the values need to match the base_message_interface colours
jenkins_colours = {
    'FAILURE' : 'red',
    'SUCCESS' : 'green',
    'ABORTED' : 'white'
}

# pick out the required parts from the snsnotify-plugin messages
jenkins_regex = r"Build ([A-Z]+): (.*) #"


class JenkinsMessageTranslator:

    def __init__(self):
        self.base_message_interface = BaseMessageInterface()

    def issue_current_directive(self, directive, play_sound=False):

        if directive == 'all_off':
            self.base_message_interface.issue_all_off()
            return

        color = self.jenkins_colour(directive)
        segment_number = self.jenkins_segment(directive)
        if segment_number == 0:
            self.base_message_interface.issue_start_build()
            if play_sound:
              play_this_thing(randomly_choose_mp3("{0}/sounds/start_build/".format(os.environ['RPI_HOME'])))
            return

        if play_sound:
          if color == 'green':
            play_this_thing(randomly_choose_mp3("{0}/sounds/success/".format(os.environ['RPI_HOME'])))
          elif color == 'red':
            play_this_thing(randomly_choose_mp3("{0}/sounds/failure/".format(os.environ['RPI_HOME'])))

        if segment_number == 1:
            self.base_message_interface.issue_update(['2','5','6','1.0',color,'blue','blue','blue','blue'])

        tokens = ['2', '6', segment_number, '1.0', color]
        self.base_message_interface.issue_update_segment(tokens)

    def jenkins_colour(self, message):
        match = re.search(jenkins_regex, message)
        return jenkins_colours[match.group(1)]

    def jenkins_segment(self, message):
        match = re.search(jenkins_regex, message)
        return jenkins_segments[match.group(2)]
