# deals with messages that are generated by:
# https://github.com/jkelabora/snsnotify-plugin

import re
from lib.base_message_interface import BaseMessageInterface
from sounds.player import Player

all_segments = {}

# these keys need to be case-sensitive matches of the jenkins build names
first_pipeline = {
    'Prepare' : 0,
    'Unit Tests' : 1,
    'Integration Tests' : 2,
    'Deploy Test' : 3,
    'Deploy to QA' : 4,
    'Deploy to Production' : 5
}

# these keys need to be case-sensitive matches of the jenkins build names
second_pipeline = {
    'DT - Prepare' : 6,
    'DT - Unit Test' : 7,
    'DT - Deploy Test' : 8,
    'DT - Deploy QA' : 9
}

all_segments.update(first_pipeline)
all_segments.update(second_pipeline)

# the keys here are from the snsnotify-plugin, the values need to match the base_message_interface colours
jenkins_colours = {
    'FAILURE' : 'red',
    'SUCCESS' : 'green',
    'ABORTED' : 'white'
}

# pick out the required parts from the snsnotify-plugin messages
jenkins_regex = r"Build ([A-Z]+): (.*) #"


class JenkinsMessageTranslator:

    def __init__(self):
        self.base_message_interface = BaseMessageInterface()
        self.sound_player = Player()

    def issue_directive(self, directive, play_sound=False):

        if directive == 'all_off':
            self.base_message_interface.issue_all_off()
            return

        color = self.determine_colour(directive)
        segment_number = self.determine_segment_number(directive)

        if segment_number == 0:
            self.base_message_interface.issue_start_build()
            if play_sound:
              self.sound_player.play_random_start_sound()
            return

        if segment_number == 1:
            self.base_message_interface.issue_update(['0','5','4',color,'blue','blue','blue','blue'])


        if segment_number == 6:
            self.base_message_interface.issue_start_second_build()
            if play_sound:
              self.sound_player.play_random_start_sound()
            return

        if segment_number == 7:
            self.base_message_interface.issue_update(['0','3','4',color,'blue','blue'])


        if play_sound:
          if color == 'green':
            self.sound_player.play_random_success_sound()
          elif color == 'red':
            self.sound_player.play_random_failure_sound()

        tokens = ['0', '4', segment_number, color]
        self.base_message_interface.issue_update_segment(tokens)

    def determine_colour(self, message):
        match = re.search(jenkins_regex, message)
        return jenkins_colours[match.group(1)]

    def determine_segment_number(self, message):
        match = re.search(jenkins_regex, message)
        return all_segments[match.group(2)]
