# deals with messages that are generated by:
# https://github.com/jkelabora/snsnotify-plugin

import re
from lib.pipeline import Pipeline
from sounds.player import Player
import logging

# pick out the required parts from the snsnotify-plugin messages
jenkins_regex = r"Build ([A-Z]+): (.*) #"

# the keys here are from the snsnotify-plugin, the values need to match the base_message_interface colours
jenkins_colours = {
    'FAILURE' : 'red',
    'SUCCESS' : 'green',
    'ABORTED' : 'white'
}

# the entries in STAGES need to be case-sensitive matches of the jenkins build names
first_pipeline = {
    'OFFSET' : 0,
    'STAGE_WIDTH' : 4,
    'STAGES' : [ 'Prepare', 'unit-tests', 'Integration Tests', 'Deploy Test', 'Deploy to QA', 'Deploy to Production' ]
}

# the entries in STAGES need to be case-sensitive matches of the jenkins build names
second_pipeline = {
    'OFFSET' : 20,
    'STAGE_WIDTH' : 4,
    'STAGES' : [ 'DT - Prepare', 'DT - Unit Test', 'DT - Deploy Test', 'DT - Deploy QA' ]
}

class JenkinsMessageTranslator:

    def __init__(self):
        self.pipelines = [ Pipeline(first_pipeline), Pipeline(second_pipeline) ]
        self.sound_player = Player()

    def determine_pipeline(self, directive):
        build_name = re.search(jenkins_regex, directive).group(2)
        if re.match('^DT', build_name):
            return self.pipelines[1]
        else:
            return self.pipelines[0]

    def determine_segment_number(self, pipeline, directive):
        match = re.search(jenkins_regex, directive)
        if match is None or match.group(2) not in pipeline.detail['STAGES']:
            logging.getLogger().error("problem determining segment for directive: {0}".format(directive))
            raise UnrecognisedDirective
        return pipeline.detail['STAGES'].index(match.group(2))

    def determine_colour(self, directive):
        match = re.search(jenkins_regex, directive)
        return jenkins_colours[match.group(1)]

    def issue_directive(self, directive, play_sound=False):

        if directive == 'all_off':
            self.pipelines[0].issue_all_off() # any pipeline will do
            return

        pipeline = self.determine_pipeline(directive)
        segment_number = self.determine_segment_number(pipeline, directive)

        if segment_number == 0:
            pipeline.issue_start_build()
            if play_sound:
              self.sound_player.play_random_start_sound()
            return

        colour = self.determine_colour(directive)
        if play_sound:
          if colour == 'green':
            self.sound_player.play_random_success_sound()
          elif colour == 'red':
            self.sound_player.play_random_failure_sound()

        if segment_number == 1:
            pipeline.issue_all_stages_update(colour)
            return

        pipeline.issue_update_segment(segment_number, colour)
